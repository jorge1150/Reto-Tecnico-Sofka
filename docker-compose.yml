version: "3.9"

networks:
  app-net:

volumes:
  pg_customer_data:
  pg_account_data:

services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks: [app-net]

  kafka:
    image: bitnami/kafka:3.7
    depends_on:
      - zookeeper
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    networks: [app-net]
    #ports:
    #  - "9092:9092"

  db-customer:
    image: postgres:16
    environment:
      POSTGRES_DB: customerdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "15432:5432"
    networks: [app-net]
    volumes:
      - pg_customer_data:/var/lib/postgresql/data
      # - ./db/BaseDatos_customer.sql:/docker-entrypoint-initdb.d/01_init.sql  # si quieres auto-crear
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d customerdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  db-account:
    image: postgres:16
    environment:
      POSTGRES_DB: accountdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "15433:5432"
    networks: [app-net]
    volumes:
      - pg_account_data:/var/lib/postgresql/data
      # - ./db/BaseDatos_account.sql:/docker-entrypoint-initdb.d/01_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d accountdb"]
      interval: 10s
      timeout: 5s
      retries: 10

  customer-service:
    build: ./customer-service
    depends_on:
      - db-customer
      - kafka
    environment:
      # Si usas application-docker.yml, no es necesario setear estas:
      SPRING_PROFILES_ACTIVE: docker
    networks: [app-net]
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 20

  account-service:
    build: ./account-service
    depends_on:
      - db-customer
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks: [app-net]
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 20
